This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-22T17:36:36.182Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/apolloClient.jsx
src/App.jsx
src/BodyClassHandler.jsx
src/CartContext.jsx
src/CartOverlay.jsx
src/Header.jsx
src/index.css
src/index.jsx
src/ProductDetails.jsx
src/ProductGrid.jsx
src/queries.jsx
src/WithRouter.jsx

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@apollo/client": "^3.11.8",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^16.0.1",
    "@testing-library/user-event": "^14.5.2",
    "graphql": "^16.9.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-image-gallery": "^1.3.0",
    "react-router-dom": "^6.27.0",
    "web-vitals": "^4.2.3"
  },
  "devDependencies": {
    "react-scripts": "^5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
    "short_name": "Scandiweb Test",
    "name": "Scandiweb Test Application",
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
  }

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/apolloClient.jsx
================
import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';

const httpLink = createHttpLink({
    uri: 'http://localhost:8080/graphql',
    credentials: 'same-origin'
  });

const client = new ApolloClient({
    link: httpLink,
    cache: new InMemoryCache()
});

export default client;

================
File: src/App.jsx
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Header from './Header';
import ProductGrid from './ProductGrid';
import ProductDetails from './ProductDetails';
import { CartProvider } from './CartContext';

class App extends React.Component {
  state = {
    selectedCategory: 'all'
  };

  handleCategoryChange = (categoryId) => {
    this.setState({ selectedCategory: categoryId });
  };

  render() {
    return (
      <CartProvider>
        <Router>
          <div className="App">
            <Header onCategoryChange={this.handleCategoryChange} />
            <div className="main-content">
              <Routes>
                <Route 
                  path="/" 
                  element={<ProductGrid categoryId={this.state.selectedCategory} />} 
                />
                <Route 
                  path="/product/:id" 
                  element={<ProductDetails />} 
                />
              </Routes>
            </div>
          </div>
        </Router>
      </CartProvider>
    );
  }
}

export default App;

================
File: src/BodyClassHandler.jsx
================
import React from 'react';
import { useLocation } from 'react-router-dom';

class BodyClassHandler extends React.Component {
  componentDidMount() {
    this.handleLocationChange();
  }

  componentDidUpdate(prevProps) {
    if (this.props.location.pathname !== prevProps.location.pathname) {
      this.handleLocationChange();
    }
  }

  handleLocationChange() {
    if (this.props.location.pathname.startsWith('/product/')) {
      document.body.classList.add('product-details-active');
    } else {
      document.body.classList.remove('product-details-active');
    }
  }

  render() {
    return null;
  }
}

// Wrapper functional component to use useLocation
function BodyClassHandlerWrapper() {
  const location = useLocation();
  return <BodyClassHandler location={location} />;
}

export default BodyClassHandlerWrapper;

================
File: src/CartContext.jsx
================
import React from 'react';

const CartContext = React.createContext();

export class CartProvider extends React.Component {
  state = {
    cartItems: []
  };

  componentDidMount() {
    // Load cart items from localStorage
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      this.setState({ cartItems: JSON.parse(savedCart) });
    }
  }

  saveCart = (cartItems) => {
    localStorage.setItem('cart', JSON.stringify(cartItems));
  }

  addToCart = (product, selectedAttributes) => {
    this.setState(prevState => {
      const existingItem = prevState.cartItems.find(item => 
        item.id === product.id && 
        JSON.stringify(item.selectedAttributes) === JSON.stringify(selectedAttributes)
      );

      let newCartItems;
      if (existingItem) {
        newCartItems = prevState.cartItems.map(item => 
          item === existingItem 
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        newCartItems = [...prevState.cartItems, { ...product, quantity: 1, selectedAttributes }];
      }

      this.saveCart(newCartItems);
      return { cartItems: newCartItems };
    });
  };

  removeFromCart = (itemToRemove) => {
    this.setState(prevState => {
      const newCartItems = prevState.cartItems.filter(item => item !== itemToRemove);
      this.saveCart(newCartItems);
      return { cartItems: newCartItems };
    });
  };

  updateItemQuantity = (item, newQuantity) => {
    this.setState(prevState => {
      const newCartItems = prevState.cartItems.map(cartItem => 
        cartItem === item ? { ...cartItem, quantity: newQuantity } : cartItem
      );
      this.saveCart(newCartItems);
      return { cartItems: newCartItems };
    });
  };

  updateItemAttributes = (item, attributeName, attributeValue) => {
    this.setState(prevState => {
      const newCartItems = prevState.cartItems.map(cartItem => 
        cartItem === item
          ? {
              ...cartItem,
              selectedAttributes: {
                ...cartItem.selectedAttributes,
                [attributeName]: attributeValue
              }
            }
          : cartItem
      );
      this.saveCart(newCartItems);
      return { cartItems: newCartItems };
    });
  };

  getTotalPrice = () => {
    return this.state.cartItems.reduce((total, item) => total + item.prices[0].amount * item.quantity, 0);
  };

  render() {
    const value = {
      cartItems: this.state.cartItems,
      addToCart: this.addToCart,
      removeFromCart: this.removeFromCart,
      updateItemQuantity: this.updateItemQuantity,
      updateItemAttributes: this.updateItemAttributes,
      getTotalPrice: this.getTotalPrice
    };

    return (
      <CartContext.Provider value={value}>
        {this.props.children}
      </CartContext.Provider>
    );
  }
}

export const CartConsumer = CartContext.Consumer;

export default CartContext;

================
File: src/CartOverlay.jsx
================
import React from 'react';
import { CartConsumer } from './CartContext';

class CartOverlay extends React.Component {
  render() {
    const { isOpen, onClose } = this.props;

    if (!isOpen) return null;

    return (
      <CartConsumer>
        {({ cartItems, removeFromCart, updateItemQuantity, getTotalPrice, updateItemAttributes }) => (
          <div className="cart-overlay active">
            <div className="cart-content">
              <h2>My Bag, {cartItems.length === 1 ? '1 item' : `${cartItems.length} items`}</h2>
              {cartItems.map((item, index) => (
                <div key={index} className="cart-item">
                  <div className="item-details">
                    <h3>{item.name}</h3>
                    <p className="item-price">{item.prices[0].currency.symbol}{item.prices[0].amount.toFixed(2)}</p>
                    {item.attributes && item.attributes.map(attr => (
                      <div key={attr.name} className="item-attribute">
                        <p>{attr.name}:</p>
                        <div className="attribute-options">
                          {attr.items.map(option => (
                            <button
                              key={option.id}
                              className={`attribute-option ${item.selectedAttributes[attr.name] === option.value ? 'selected' : ''}`}
                              style={attr.type === 'swatch' ? { backgroundColor: option.value } : {}}
                              onClick={() => updateItemAttributes(item, attr.name, option.value)}
                            >
                              {attr.type !== 'swatch' && option.value}
                            </button>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="item-actions">
                    <button onClick={() => updateItemQuantity(item, item.quantity + 1)}>+</button>
                    <span>{item.quantity}</span>
                    <button onClick={() => {
                      if (item.quantity === 1) {
                        removeFromCart(item);
                      } else {
                        updateItemQuantity(item, item.quantity - 1);
                      }
                    }}>-</button>
                  </div>
                  <img src={item.gallery[0]} alt={item.name} className="item-image" />
                </div>
              ))}
              <div className="cart-total">
                <h3>Total</h3>
                <p>${getTotalPrice().toFixed(2)}</p>
              </div>
              <div className="cart-buttons">
                <button className="checkout-btn" onClick={this.handlePlaceOrder}>
                  PLACE ORDER
                </button>
              </div>
            </div>
          </div>
        )}
      </CartConsumer>
    );
  }

  handlePlaceOrder = () => {
    console.log('Place order clicked');
  }
}

export default CartOverlay;

================
File: src/Header.jsx
================
import React from 'react';
import { Link } from 'react-router-dom';
import CartOverlay from './CartOverlay';
import CartContext from './CartContext';
import cart_icon from './assets/EmptyCart.png';

class Header extends React.Component {
  static contextType = CartContext;

  state = {
    activeTab: 'All',
    isCartOpen: false
  };

  handleClick = (tab, categoryId) => {
    this.setState({ activeTab: tab });
    this.props.onCategoryChange(categoryId);
  };

  toggleCart = (e) => {
    e.preventDefault();
    this.setState(prevState => ({ isCartOpen: !prevState.isCartOpen }));
  };

  render() {
    const { activeTab, isCartOpen } = this.state;
    const { cartItems } = this.context;
    const itemCount = cartItems.reduce((total, item) => total + item.quantity, 0);

    return (
      <>
        <header className="main-header">
          <nav>
            <ul>
              <li>
                <Link
                  to="/"
                  className={`nav-link ${activeTab === 'All' ? 'active' : ''}`}
                  onClick={() => this.handleClick('All', 'all')}
                >
                  ALL
                </Link>
              </li>
              <li>
                <Link
                  to="/"
                  className={`nav-link ${activeTab === 'Clothes' ? 'active' : ''}`}
                  onClick={() => this.handleClick('Clothes', '2')}
                >
                  CLOTHES
                </Link>
              </li>
              <li>
                <Link
                  to="/"
                  className={`nav-link ${activeTab === 'Tech' ? 'active' : ''}`}
                  onClick={() => this.handleClick('Tech', '3')}
                >
                  TECH
                </Link>
              </li>
            </ul>
          </nav>
          <div className="cart-wrapper">
            <div className="cart-icon" onClick={this.toggleCart} data-testid="cart-btn">
              <img src={cart_icon} alt="Cart" />
              {itemCount > 0 && <span className="cart-count">{itemCount}</span>}
            </div>
          </div>
        </header>
        <CartOverlay isOpen={isCartOpen} onClose={this.toggleCart} />
        {isCartOpen && <div className="cart-overlay-wrapper" onClick={this.toggleCart}></div>}
      </>
    );
  }
}

export default Header;

================
File: src/index.css
================
body, html {
  margin: 0;
  padding: 0;
  height: 100%;
}

.App {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Header */
.main-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 100px;
  height: 80px;
  position: relative;
  caret-color: transparent;
  z-index: 1001;
  background-color: white; 
}

ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  caret-color: transparent;
}

li {
  float: left;
  caret-color: transparent;
}

li a.nav-link {
  display: block;
  color: rgb(0, 0, 0);
  text-align: center;
  padding: 16px;
  text-decoration: none;
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 400;
  font-size: large;
  transition: border-color 0.2s, color 0.2s;
  border-bottom: 2px solid transparent;
  padding-bottom: 5px;
  display: inline-block;
}

li a.nav-link:hover {
  border-bottom: 2px solid #5ECE7B;
  padding-bottom: 5px;
  color: #5ECE7B;
}

li a.nav-link.active {
  color: #5ECE7B;
  border-bottom: 2px solid #5ECE7B;
}

.cart-wrapper {
  position: relative;
  z-index: 1002;
}

.cart-icon {
  cursor: pointer;
}

.cart-count {
  position: absolute;
  top: -10px;
  right: -10px;
  background-color: #1D1F22;
  color: white;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 12px;
  font-weight: bold;
}

.logo {
  position: absolute;
  top: 20px;
  left: 900px;
}

li a.cart-link {
  border-bottom: none;
  padding-bottom: 0;
}

li a.cart-link:hover {
  border-bottom: none;
  color: inherit;
}

.cart {
  position: absolute;
  top: 30px;
  left: 90%;
  caret-color: transparent;
}

.cart-count {
  font-family: 'Roboto Condensed', sans-serif;
}

.cart-overlay {
  position: absolute;
  top: 80px;
  right: 40px;
  width: 325px;
  background-color: white;
  box-shadow: 0 4px 35px rgba(168, 172, 176, 0.19);
  padding: 32px 16px;
  z-index: 1000;
  max-height: calc(100vh - 80px);
  overflow-y: auto;
  overflow-x: hidden;
  box-sizing: border-box;
  caret-color: transparent;
  font-family: 'Roboto Condensed', sans-serif;
}

.cart-content {
  width: 100%;
}

.cart-overlay.active {
  display: block;
}

.cart-overlay-wrapper {
  position: fixed;
  top: 80px;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 999;
}

.checkout-btn:disabled {
  background-color: #A6A6A6;
  cursor: not-allowed;
}

.cart-content h2 {
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 32px;
  font-family: 'Roboto Condensed', sans-serif;
}

.cart-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 40px;
  width: 100%;
}

.cart-item .item-image {
  width: 100px;
  height: 160px;
  object-fit: scale-down;
}

.item-details {
  flex: 1;
  margin-right: 10px;
  text-transform: capitalize;
}

.item-details h3 {
  font-size: 16px;
  font-weight: 300;
  margin-bottom: 4px;
  font-family: 'Roboto Condensed', sans-serif;
}

.cart-total {
  display: flex;
  justify-content: space-between;
  font-weight: 600;
  margin-bottom: 32px;
  font-family: 'Roboto Condensed', sans-serif;
}

.item-price {
  font-size: 18px;
  font-weight: 600;
  font-family: 'Roboto Condensed', sans-serif;
}

.item-attribute {
  margin-top: 8px;
}

.attribute-options {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.attribute-option {
  min-width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #1D1F22;
  font-size: 14px;
  padding: 0 4px;
  box-sizing: border-box;
}

.attribute-option.selected {
  background-color: #1D1F22;
  color: white;
}

.item-actions {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 160px;
  margin-right: 10px;
}

.item-actions button {
  background: none;
  border: 1px solid #1D1F22;
  cursor: pointer;
  font-size: 16px;
  padding: 0;
  width: 24px;
  height: 24px; 
  display: flex; 
  justify-content: center; 
  align-items: center; 
}


.cart-buttons {
  display: flex;
  justify-content: space-between;
}

.checkout-btn {
  width: 100%;
  padding: 16px;
  background-color: #5ECE7B;
  border: none;
  color: white;
  font-size: 14px;
  font-weight: 600;
  text-transform: uppercase;
  cursor: pointer;
  font-family: 'Roboto Condensed', sans-serif;
}

.checkout-btn {
  background-color: #5ECE7B;
  border: none;
  color: white;
}

ul li a.nav-link.active {
  color: #5ECE7B;
  border-bottom: 2px solid #5ECE7B;
}

.category-display {
  margin-top: 60px;
  margin-left: 100px
}

.category-display h1 {
  font-size: 36px;
  color: black;
  text-align: left;
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 200;
  caret-color: transparent;
}

/* Products */
.product-container {
  width: 1600px;
  margin: 0 auto;
  padding-left: 52px
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 40px;
}

.product-card {
  display: flex;
  flex-direction: column;
  position: relative;
  padding: 16px;
  transition: box-shadow 0.3s ease;
  width: 400px;
  height: 450px;
  box-sizing: border-box;
  caret-color: transparent;
}

.product-card:hover {
  box-shadow: 0 4px 35px rgba(168, 172, 176, 0.19);
}

.product-image {
  width: 100%;
  height: 80%;
  object-fit: cover;
}

.product-name {
  font-size: 18px;
  font-weight: 300;
  font-family: 'Roboto Condensed', sans-serif;
}

.product-price {
  font-weight: 500;
  margin: 5px 0 0;
  font-family: 'Roboto Condensed', sans-serif;
}

.out-of-stock-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 80%;
  background-color: rgba(226, 226, 226, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  color: black;
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 200;
  font-size: x-large;
  z-index: 10;
}

.out-of-stock {
  z-index: 20;
}

.add-to-cart {
  position: absolute;
  bottom: 72px;
  right: 31px;
  border: none;
  color: white;
  width: 52px;
  height: 52px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 11px rgba(29, 31, 34, 0.1);
  opacity: 0;
  transition: opacity 0.3s ease;
  font-family: 'Roboto Condensed', sans-serif;
}

.add-to-cart:disabled {
  background-color: #cccccc;
  color: #666666;
  cursor: not-allowed;
}

.product-card:hover .add-to-cart {
  opacity: 1;
}

.cart-icon {
  font-size: 24px;
  font-weight: bold;
}

/* Scrollbar */
html {
  scrollbar-gutter: stable;
}

::-webkit-scrollbar {
  width: 4px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background-color: #5ECE7B;
  border-radius: 20px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: #5ECE7B;
}

* {
  scrollbar-width: thin;
  scrollbar-color: #5ECE7B transparent;
}

a {
  color: black;
  text-decoration: none;
}

/* Product Details Page */
.product-details {
  display: flex;
  padding: 32px;
  max-width: 1200px;
  margin: 0 auto;
  font-family: 'Roboto Condensed', sans-serif;
  caret-color: transparent;
}

body.product-details-active .category-display h1 {
  display: none;
}

.product-gallery {
  display: flex;
  flex: 1;
  margin-right: 40px;
}

.thumbnails {
  display: flex;
  flex-direction: column;
  margin-right: 20px;
}

.thumbnail {
  width: 80px;
  height: 80px;
  object-fit: cover;
  margin-bottom: 10px;
  cursor: pointer;
  border: 1px solid transparent;
}

.thumbnail.selected {
  border-color: #5ECE7B;
}

.main-image {
  position: relative;
  width: 100%;
  max-height: 600px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

.main-image img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.image-scroll-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(0, 0, 0, 0.73);
  color: white;
  border: none;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 20px;
  line-height: 1;
  padding: 0;
  z-index: 10;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.image-scroll-button.left {
  left: 46px;
}

.image-scroll-button.right {
  right: 46px;
}

.main-image:hover .image-scroll-button {
  opacity: 1;
}

.product-info {
  flex: 1;
}

.product-details .product-name {
  font-size: 30px;
  font-weight: 600;
  margin-bottom: 16px;
}

.product-details .product-brand {
  font-size: 20px;
  font-weight: 400;
  margin-bottom: 40px;
}

.product-attribute {
  margin-bottom: 24px;
}

.product-attribute h3 {
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 700;
  font-size: 18px;
  text-transform: uppercase;
}

.attribute-options {
  display: flex;
  gap: 8px;
  margin-top: 8px;
}

.attribute-option {
  min-width: 63px;
  height: 45px;
  border: 1px solid #1D1F22;
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 400;
  font-size: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  background-color: white;
}

.attribute-option.selected {
  background-color: #1D1F22;
  color: white;
}

.attribute-option[style] {
  width: 32px;
  height: 32px;
  min-width: unset;
}

.attribute-option[style].selected {
  outline: 1px solid #5ECE7B;
  outline-offset: 1px;
}

.product-details .product-price h3 {
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 700;
  font-size: 18px;
  text-transform: uppercase;
}

.product-details .product-price p {
  font-weight: 700;
  font-size: 24px;
  margin-top: 10px;
}

.product-details .add-to-cart {
  width: 100%;
  padding: 16px;
  background-color: #5ECE7B;
  border: none;
  color: white;
  font-size: 16px;
  font-weight: 600;
  text-transform: uppercase;
  cursor: pointer;
  margin-top: 20px;
  position: static;
  opacity: 1;
  border-radius: 0;
  height: auto;
}

.product-details .add-to-cart:disabled {
  background-color: #A6A6A6;
  cursor: not-allowed;
}

.product-description {
  margin-top: 40px;
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 159.96%;
}

================
File: src/index.jsx
================
import React from 'react';
import ReactDOM from 'react-dom';
import { ApolloProvider } from '@apollo/client';
import client from './apolloClient';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <App />
    </ApolloProvider>
  </React.StrictMode>,
  document.getElementById('root')
);

================
File: src/ProductDetails.jsx
================
import React from 'react';
import { Query } from '@apollo/client/react/components';
import { GET_PRODUCT } from './queries';
import { CartConsumer } from './CartContext';
import { WithRouter } from './WithRouter';

class ProductDetailsContent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedAttributes: this.getInitialSelectedAttributes(),
      selectedImageIndex: 0,
      isHoveringImage: false
    };
  }

  getInitialSelectedAttributes() {
    const { product, cartItems } = this.props;
    const cartItem = cartItems.find(item => item.id === product.id);
    if (cartItem && cartItem.selectedAttributes) {
      return Object.keys(cartItem.selectedAttributes).reduce((acc, key) => {
        const attribute = product.attributes.find(attr => attr.name === key);
        if (attribute) {
          const item = attribute.items.find(item => item.value === cartItem.selectedAttributes[key]);
          if (item) {
            acc[attribute.id] = item.id;
          }
        }
        return acc;
      }, {});
    }
    return {};
  }

  componentDidUpdate(prevProps) {
    if (prevProps.cartItems !== this.props.cartItems || prevProps.product !== this.props.product) {
      this.setState({
        selectedAttributes: this.getInitialSelectedAttributes()
      });
    }
  }

  handleAttributeChange = (attributeId, itemId) => {
    this.setState(prevState => ({
      selectedAttributes: {
        ...prevState.selectedAttributes,
        [attributeId]: itemId
      }
    }));
  };

  handleThumbnailClick = (index) => {
    this.setState({ selectedImageIndex: index });
  };

  handlePrevImage = () => {
    this.setState(prevState => ({
      selectedImageIndex: (prevState.selectedImageIndex - 1 + this.props.product.gallery.length) % this.props.product.gallery.length
    }));
  };

  handleNextImage = () => {
    this.setState(prevState => ({
      selectedImageIndex: (prevState.selectedImageIndex + 1) % this.props.product.gallery.length
    }));
  };

  handleImageHover = (isHovering) => {
    this.setState({ isHoveringImage: isHovering });
  }

  areAllAttributesSelected = () => {
    const { product } = this.props;
    const { selectedAttributes } = this.state;
    return product.attributes.every(attribute => selectedAttributes.hasOwnProperty(attribute.id));
  }

  handleAddToCart = () => {
    const { product, addToCart } = this.props;
    const { selectedAttributes } = this.state;

    // Convert selectedAttributes to the format expected by the cart
    const cartAttributes = Object.keys(selectedAttributes).reduce((acc, attributeId) => {
      const attribute = product.attributes.find(attr => attr.id === attributeId);
      if (attribute) {
        const item = attribute.items.find(item => item.id === selectedAttributes[attributeId]);
        if (item) {
          acc[attribute.name] = item.value;
        }
      }
      return acc;
    }, {});

    addToCart(product, cartAttributes);
  }

  render() {
    const { product } = this.props;
    const { selectedImageIndex, selectedAttributes } = this.state;
    const isAddToCartDisabled = !product.inStock || !this.areAllAttributesSelected();

    return (
      <div className="product-details">
        <div className="product-gallery">
          <div className="thumbnails">
            {product.gallery.map((image, index) => (
              <img
                key={index}
                src={image}
                alt={`${product.name} thumbnail ${index + 1}`}
                className={`thumbnail ${selectedImageIndex === index ? 'selected' : ''}`}
                onClick={() => this.handleThumbnailClick(index)}
              />
            ))}
          </div>
          <div className="main-image">
            <img src={product.gallery[selectedImageIndex]} alt={product.name} />
            <button className="image-scroll-button left" onClick={this.handlePrevImage}>&lt;</button>
            <button className="image-scroll-button right" onClick={this.handleNextImage}>&gt;</button>
          </div>
        </div>
        <div className="product-info">
          <h1 className="product-name">{product.name}</h1>
          <h2 className="product-brand">{product.brand}</h2>

          {product.attributes.map(attribute => (
            <div key={attribute.id} className="product-attribute">
              <h3>{attribute.name}:</h3>
              <div className="attribute-options">
                {attribute.items.map(item => (
                  <button
                    key={item.id}
                    className={`attribute-option ${selectedAttributes[attribute.id] === item.id ? 'selected' : ''}`}
                    onClick={() => this.handleAttributeChange(attribute.id, item.id)}
                    style={attribute.type === 'swatch' ? { backgroundColor: item.value } : {}}
                  >
                    {attribute.type === 'swatch' ? '' : item.displayValue}
                  </button>
                ))}
              </div>
            </div>
          ))}

          <div className="product-price">
            <h3>PRICE:</h3>
            {product.prices.map((price, index) => (
              <p key={index}>{price.currency.symbol}{price.amount.toFixed(2)}</p>
            ))}
          </div>

          <button
            className="add-to-cart"
            disabled={isAddToCartDisabled}
            onClick={this.handleAddToCart}
          >
            {product.inStock ? 'ADD TO CART' : 'OUT OF STOCK'}
          </button>

          <div
            className="product-description"
            dangerouslySetInnerHTML={{ __html: product.description }}
          />
        </div>
      </div>
    );
  }
}

class ProductDetails extends React.Component {
  render() {
    const { id } = this.props.router.params;

    return (
      <Query query={GET_PRODUCT} variables={{ id }}>
        {({ loading, error, data }) => {
          if (loading) return <div className="loading">Loading...</div>;
          if (error) return <div className="error">Error: {error.message}</div>;

          const product = data.product;
          if (!product) return <div className="error">Product not found</div>;

          return (
            <CartConsumer>
              {({ addToCart, cartItems }) => (
                <ProductDetailsContent product={product} addToCart={addToCart} cartItems={cartItems} />
              )}
            </CartConsumer>
          );
        }}
      </Query>
    );
  }
}

export default WithRouter(ProductDetails);

================
File: src/ProductGrid.jsx
================
import React from 'react';
import { Query } from '@apollo/client/react/components';
import { gql } from '@apollo/client';
import { Link } from 'react-router-dom';
import { CartConsumer } from './CartContext';
import buy_icon from './assets/circle_icon.png';

const GET_PRODUCTS = gql`
  query GetProducts($categoryId: String) {
    products(categoryId: $categoryId) {
      id
      name
      inStock
      gallery
      prices {
        amount
        currency {
          symbol
        }
      }
      brand
      attributes {
        id
        name
        type
        items {
          id
          displayValue
          value
        }
      }
    }
  }
`;

class ProductCard extends React.Component {
    handleQuickAddToCart = (e, product, addToCart) => {
        e.preventDefault();
        if (!product.inStock) return;

        const defaultAttributes = product.attributes.reduce((acc, attr) => {
            if (attr.items.length > 0) {
                acc[attr.name] = attr.items[0].value;
            }
            return acc;
        }, {});

        addToCart(product, defaultAttributes);
    }

    render() {
        const { product } = this.props;
        const price = product.prices && product.prices.length > 0 ? product.prices[0] : null;

        return (
            <CartConsumer>
                {({ addToCart }) => (
                    <Link to={`/product/${product.id}`} className="product-card-link">
                        <div className="product-card">
                            <img src={product.gallery[0]} alt={product.name} className="product-image" />
                            {!product.inStock && (
                                <div className="out-of-stock-overlay">
                                    <span className="out-of-stock">OUT OF STOCK</span>
                                </div>
                            )}
                            <h3 className="product-name">{product.name}</h3>
                            {price ? (
                                <p className="product-price">{price.currency.symbol}{price.amount.toFixed(2)}</p>
                            ) : (
                                <p className="product-price">Price not available</p>
                            )}
                            {product.inStock && (
                                <button 
                                    className="add-to-cart"
                                    onClick={(e) => this.handleQuickAddToCart(e, product, addToCart)}
                                >
                                    <img src={buy_icon} alt="Add to cart" className="cart-icon" />
                                </button>
                            )}
                        </div>
                    </Link>
                )}
            </CartConsumer>
        );
    }
}

class ProductGrid extends React.Component {
    render() {
        const { categoryId } = this.props;

        return (
            <Query query={GET_PRODUCTS} variables={{ categoryId }}>
                {({ loading, error, data }) => {
                    if (loading) return <p></p>;
                    if (error) return <p>Error: {error.message}</p>;

                    return (
                        <div className="product-container">
                            <div className="product-grid">
                                {data.products.map(product => (
                                    <ProductCard key={product.id} product={product} />
                                ))}
                            </div>
                        </div>
                    );
                }}
            </Query>
        );
    }
}

export default ProductGrid;

================
File: src/queries.jsx
================
import { gql } from '@apollo/client';

export const GET_CART_ITEMS = gql`
  query GetCartItems {
    cartItems {
      id
      productId
      name
      brand
      gallery
      quantity
      prices {
        amount
        currency {
          label
          symbol
        }
      }
      attributes {
        id
        name
        type
        items {
          displayValue
          value
          id
        }
      }
      selectedAttributes {
        name
        value
      }
    }
  }
`;

export const ADD_TO_CART = gql`
  mutation AddToCart($productId: ID!, $quantity: Int!, $selectedAttributes: [AttributeInput!]!) {
    addToCart(productId: $productId, quantity: $quantity, selectedAttributes: $selectedAttributes) {
      id
      quantity
    }
  }
`;

export const REMOVE_FROM_CART = gql`
  mutation RemoveFromCart($cartItemId: ID!) {
    removeFromCart(cartItemId: $cartItemId) {
      id
    }
  }
`;

export const UPDATE_CART_ITEM_QUANTITY = gql`
  mutation UpdateCartItemQuantity($cartItemId: ID!, $quantity: Int!) {
    updateCartItemQuantity(cartItemId: $cartItemId, quantity: $quantity) {
      id
      quantity
    }
  }
`;

export const PLACE_ORDER = gql`
  mutation PlaceOrder {
    placeOrder {
      id
      total {
        amount
        currency {
          label
          symbol
        }
      }
    }
  }
`;

export const GET_PRODUCT = gql`
  query GetProduct($id: String!) {
    product(id: $id) {
      id
      name
      inStock
      gallery
      description
      category {
        name
      }
      prices {
        amount
        currency {
          symbol
        }
      }
      brand
      attributes {
        id
        name
        type
        items {
          id
          displayValue
          value
        }
      }
    }
  }
`;

================
File: src/WithRouter.jsx
================
import React from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';

export function WithRouter(Component) {
  function ComponentWithRouterProp(props) {
    let params = useParams();
    let navigate = useNavigate();
    let location = useLocation();
    return (
      <Component
        {...props}
        router={{ params, navigate, location }}
      />
    );
  }

  return ComponentWithRouterProp;
}
